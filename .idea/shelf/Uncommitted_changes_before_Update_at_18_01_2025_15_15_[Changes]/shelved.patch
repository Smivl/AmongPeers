Index: src/main/java/Game/Player/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Game.Player;\r\n\r\nimport Game.GameCharacter.CharacterView;\r\nimport Game.GameController;\r\nimport Game.GameMap.GameMap;\r\nimport Server.ClientUpdate;\r\nimport Server.Request;\r\nimport Server.Response;\r\nimport Server.ServerUpdate;\r\nimport javafx.application.Platform;\r\nimport javafx.beans.property.BooleanProperty;\r\nimport javafx.beans.property.SimpleBooleanProperty;\r\nimport javafx.scene.input.KeyEvent;\r\nimport javafx.scene.paint.Color;\r\nimport org.jspace.ActualField;\r\nimport org.jspace.FormalField;\r\nimport org.jspace.RemoteSpace;\r\nimport org.jspace.Space;\r\n\r\nimport java.net.URI;\r\nimport java.util.Arrays;\r\n\r\npublic class Player {\r\n\r\n    private final int SPEED = 650;\r\n    private boolean wDown, aDown, sDown, dDown;\r\n\r\n    private GameController controller;\r\n\r\n    private PlayerView playerView;\r\n    private CharacterView characterView;\r\n\r\n    private final BooleanProperty canKill = new SimpleBooleanProperty(false);\r\n    private final BooleanProperty canReport = new SimpleBooleanProperty(false);\r\n\r\n    private PlayerInfo playerInfo;\r\n    private final String name;\r\n\r\n    private Space playerSpace;\r\n    private final Space serverSpace;\r\n\r\n    private final URI serverURI;\r\n\r\n\r\n    public PlayerInfo getInfo() { return playerInfo; }\r\n    public PlayerView getPlayerView() { return playerView; }\r\n    public CharacterView getCharacterView() { return characterView; }\r\n    public Space getPlayerSpace() { return playerSpace; }\r\n\r\n    public void setController(GameController controller) { this.controller = controller; }\r\n\r\n\r\n    public Player(String name, Space serverSpace, URI serverURI){\r\n\r\n        this.name = name;\r\n\r\n        this.serverSpace = serverSpace;\r\n        this.serverURI = serverURI;\r\n    }\r\n\r\n    public void join() {\r\n        try{\r\n            serverSpace.put(Request.JOIN);\r\n            serverSpace.put(Request.JOIN, name);\r\n\r\n            Object[] response = serverSpace.get(new ActualField(name), new FormalField(Response.class));\r\n\r\n            switch ((Response) response[1]){\r\n                case SUCCESS:\r\n                case ACCEPTED:{\r\n                    playerSpace = new RemoteSpace(\r\n                            serverURI.getScheme() + \"://\" +\r\n                                    serverURI.getHost() + \":\" +\r\n                                    serverURI.getPort() + \"/\" +\r\n                                    name + \"?\" +\r\n                                    serverURI.getQuery()\r\n                    );\r\n\r\n                    break;\r\n                }\r\n                case CONFLICT:{\r\n                    System.out.println(\"Player name already exists! Pick another name.\");\r\n                    break;\r\n                }\r\n                case PERMISSION_DENIED:{\r\n                    System.out.println(\"Permission denied to join server!\");\r\n                    break;\r\n                }\r\n                case ERROR:\r\n                case FAILURE:{\r\n                    System.out.println(\"Server does not exist!\");\r\n                    break;\r\n                }\r\n            }\r\n\r\n\r\n        }catch (Exception e){\r\n            System.out.println(\"Error in join\");\r\n            System.out.println(e.getMessage());\r\n        }\r\n\r\n    }\r\n\r\n    // Aka start game (after joining)\r\n    public void init(){\r\n        try{\r\n            Object[] playerInfo = playerSpace.get(new ActualField(ServerUpdate.PLAYER_INIT), new FormalField(PlayerInfo.class));\r\n            PlayerInfo info = (PlayerInfo) playerInfo[1];\r\n\r\n            this.playerInfo = info;\r\n            this.playerView = new PlayerView(\r\n                    info,\r\n                    new BooleanProperty[]{ // order is: use, map, report, kill, sabotage\r\n                            new SimpleBooleanProperty(true),\r\n                            new SimpleBooleanProperty(true),\r\n                            canReport,\r\n                            canKill,\r\n                            new SimpleBooleanProperty(true)\r\n                    },\r\n                    new Runnable[]{ // order is: use, map, report, kill, sabotage\r\n                            this::onUseClicked,\r\n                            this::onMapClicked,\r\n                            this::onReportClicked,\r\n                            this::onKillClicked,\r\n                            this::onSabotageClicked\r\n                    }\r\n            );\r\n\r\n\r\n            this.characterView = new CharacterView(name, info, info.isImposter ? Color.RED : Color.WHITE);\r\n\r\n        }catch (Exception e){\r\n            System.out.println(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public void onKilled() {\r\n        playerInfo.isAlive = false;\r\n        this.characterView.onKilled();\r\n    }\r\n\r\n    public void onUpdate(double delta, GameMap map){\r\n        double newX = playerInfo.position[0] + playerInfo.velocity[0] * delta;\r\n        double newY = playerInfo.position[1] + playerInfo.velocity[1] * delta;\r\n\r\n        this.characterView.render(new double[]{newX, newY}, playerInfo.velocity);\r\n\r\n        // If no collision then move player position\r\n        if (!map.checkCollision(this.characterView)) {\r\n\r\n            if(playerInfo.position[0] != newX || playerInfo.position[1] != newY){\r\n                // push updated movement to server\r\n                try{\r\n                    playerSpace.put(ClientUpdate.POSITION);\r\n                    playerSpace.put(ClientUpdate.POSITION, new double[]{newX, newY}, playerInfo.velocity);\r\n                }catch (Exception e){\r\n                    System.out.println(e.getMessage());\r\n                }\r\n            }\r\n\r\n\r\n            playerInfo.position[0] = newX;\r\n            playerInfo.position[1] = newY;\r\n\r\n\r\n        }else{\r\n            this.characterView.render(playerInfo.position, playerInfo.velocity);\r\n\r\n        }\r\n\r\n        // set conditions for killing\r\n        canKill.set(\r\n            !(\r\n                playerInfo.isAlive &&\r\n                playerInfo.isImposter &&\r\n                controller.getPlayerToKill(this.characterView) != null\r\n            )\r\n        );\r\n\r\n        canReport.set(\r\n            !(\r\n                map.checkCollisionsWithBodies(this.characterView) &&\r\n                playerInfo.isAlive\r\n            )\r\n        );\r\n    }\r\n\r\n    public void handleKeyPressed(KeyEvent event) {\r\n        switch (event.getCode()) {\r\n            case W: {\r\n                wDown = true;\r\n                break;\r\n            }\r\n            case A: {\r\n                aDown = true;\r\n                break;\r\n            }\r\n            case S: {\r\n                sDown = true;\r\n                break;\r\n            }\r\n            case D: {\r\n                dDown = true;\r\n                break;\r\n            }\r\n            case F1: { // Call meeting\r\n                if(playerInfo.isAlive) {\r\n                    try {\r\n                        playerSpace.put(ClientUpdate.MEETING);\r\n                        playerSpace.put(ClientUpdate.MEETING, name);\r\n                    } catch (InterruptedException e) {\r\n                        throw new RuntimeException(e);\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n        }\r\n\r\n        updateVelocity();\r\n    }\r\n\r\n    public void handleKeyReleased(KeyEvent event) {\r\n        switch (event.getCode()) {\r\n            case W: {\r\n                wDown = false;\r\n                break;\r\n            }\r\n            case A: {\r\n                aDown = false;\r\n                break;\r\n            }\r\n            case S: {\r\n                sDown = false;\r\n                break;\r\n            }\r\n            case D: {\r\n                dDown = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        updateVelocity();\r\n    }\r\n\r\n    private void updateVelocity() {\r\n        double dx = 0;\r\n        double dy = 0;\r\n\r\n        if (wDown) dy -= 1;\r\n        if (sDown) dy += 1;\r\n        if (aDown) dx -= 1;\r\n        if (dDown) dx += 1;\r\n\r\n        double length = Math.sqrt(dx * dx + dy * dy);\r\n        if (length != 0) {\r\n            dx = dx / length * SPEED;\r\n            dy = dy / length * SPEED;\r\n        } else{\r\n\r\n            // Notify that we have stopped moving! Only does once!\r\n            Platform.runLater(() -> {\r\n                try {\r\n                    playerSpace.put(ClientUpdate.POSITION);\r\n                    playerSpace.put(ClientUpdate.POSITION, playerInfo.position, playerInfo.velocity);\r\n                } catch (InterruptedException e) {\r\n                    throw new RuntimeException(e);\r\n                }\r\n            });\r\n        }\r\n\r\n        playerInfo.velocity[0] = dx;\r\n        playerInfo.velocity[1] = dy;\r\n    }\r\n\r\n    private void onUseClicked(){\r\n        System.out.println(\"Use not implemented yet\");\r\n    }\r\n\r\n    private void onMapClicked(){\r\n        System.out.println(\"Map not implemented yet\");\r\n    }\r\n\r\n    private void onReportClicked(){\r\n        System.out.println(\"Report clicked\");\r\n    }\r\n\r\n    private void onKillClicked(){\r\n        System.out.println(\"Kill clicked\");\r\n\r\n        CharacterView playerKilled = controller.getPlayerToKill(this.characterView);\r\n\r\n        if (playerKilled != null) {\r\n            playerInfo.position = new double[]{playerKilled.getCenterX(), playerKilled.getCenterY()};\r\n            this.characterView.render(playerInfo.position, playerInfo.velocity);\r\n\r\n            try {\r\n                playerSpace.put(ClientUpdate.POSITION);\r\n                playerSpace.put(ClientUpdate.POSITION, playerInfo.position, playerInfo.velocity);\r\n\r\n                playerSpace.put(ClientUpdate.KILL);\r\n                playerSpace.put(ClientUpdate.KILL, name, playerKilled.getName());\r\n            } catch (Exception e) {\r\n                System.out.println(Arrays.toString(e.getStackTrace()));\r\n            }\r\n        }\r\n    }\r\n\r\n    private void onSabotageClicked(){\r\n        System.out.println(\"Sabotage not implemented yet\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Game/Player/Player.java b/src/main/java/Game/Player/Player.java
--- a/src/main/java/Game/Player/Player.java	
+++ b/src/main/java/Game/Player/Player.java	
@@ -3,6 +3,7 @@
 import Game.GameCharacter.CharacterView;
 import Game.GameController;
 import Game.GameMap.GameMap;
+import Game.Interactables.Interactable;
 import Server.ClientUpdate;
 import Server.Request;
 import Server.Response;
@@ -25,6 +26,9 @@
     private final int SPEED = 650;
     private boolean wDown, aDown, sDown, dDown;
 
+    private Interactable interactableInFocus = null;
+    private Interactable ventInFocus = null;
+
     private GameController controller;
 
     private PlayerView playerView;
@@ -32,6 +36,8 @@
 
     private final BooleanProperty canKill = new SimpleBooleanProperty(false);
     private final BooleanProperty canReport = new SimpleBooleanProperty(false);
+    private final BooleanProperty canInteract = new SimpleBooleanProperty(false);
+    private final BooleanProperty canVent = new SimpleBooleanProperty(false);
 
     private PlayerInfo playerInfo;
     private final String name;
@@ -41,7 +47,6 @@
 
     private final URI serverURI;
 
-
     public PlayerInfo getInfo() { return playerInfo; }
     public PlayerView getPlayerView() { return playerView; }
     public CharacterView getCharacterView() { return characterView; }
@@ -49,7 +54,6 @@
 
     public void setController(GameController controller) { this.controller = controller; }
 
-
     public Player(String name, Space serverSpace, URI serverURI){
 
         this.name = name;
@@ -110,19 +114,21 @@
             this.playerInfo = info;
             this.playerView = new PlayerView(
                     info,
-                    new BooleanProperty[]{ // order is: use, map, report, kill, sabotage
-                            new SimpleBooleanProperty(true),
-                            new SimpleBooleanProperty(true),
+                    new BooleanProperty[]{ // order is: interact, report, kill, sabotage, vent
+                            canInteract,
                             canReport,
                             canKill,
-                            new SimpleBooleanProperty(true)
+                            new SimpleBooleanProperty(true),
+                            canVent
                     },
-                    new Runnable[]{ // order is: use, map, report, kill, sabotage
-                            this::onUseClicked,
+                    new Runnable[]{ // order is: interact, map, report, kill, sabotage, vent, settings
+                            this::onInteractClicked,
                             this::onMapClicked,
                             this::onReportClicked,
                             this::onKillClicked,
-                            this::onSabotageClicked
+                            this::onSabotageClicked,
+                            this::onVentClicked,
+                            this::onSettingsClicked
                     }
             );
 
@@ -168,7 +174,6 @@
 
         }
 
-        // set conditions for killing
         canKill.set(
             !(
                 playerInfo.isAlive &&
@@ -176,13 +181,29 @@
                 controller.getPlayerToKill(this.characterView) != null
             )
         );
-
         canReport.set(
             !(
-                map.checkCollisionsWithBodies(this.characterView) &&
+                map.checkCollisionWithBodies(this.characterView) &&
                 playerInfo.isAlive
             )
         );
+        interactableInFocus = map.getInteractable(this.characterView);
+        canInteract.set(
+            !(
+                interactableInFocus != null &&
+                interactableInFocus.canInteract(playerInfo)
+            )
+        );
+        if(playerInfo.isImposter){
+            ventInFocus = map.getVent(this.characterView);
+            canVent.set(
+                !(
+                    ventInFocus != null &&
+                    ventInFocus.canInteract(playerInfo)
+                )
+            );
+        }
+
     }
 
     public void handleKeyPressed(KeyEvent event) {
@@ -242,6 +263,55 @@
         updateVelocity();
     }
 
+    private void onSettingsClicked(){
+        System.out.println("Settings not implemented yet");
+    }
+
+    private void onInteractClicked(){
+        System.out.println("Use not implemented yet");
+    }
+
+    private void onMapClicked(){
+        System.out.println("Map not implemented yet");
+    }
+
+    private void onReportClicked(){
+        System.out.println("Report clicked");
+    }
+
+    private void onKillClicked(){
+        System.out.println("Kill clicked");
+
+        CharacterView playerKilled = controller.getPlayerToKill(this.characterView);
+
+        if (playerKilled != null) {
+            playerInfo.position = new double[]{playerKilled.getCenterX(), playerKilled.getCenterY()};
+            this.characterView.render(playerInfo.position, playerInfo.velocity);
+
+            try {
+                playerSpace.put(ClientUpdate.POSITION);
+                playerSpace.put(ClientUpdate.POSITION, playerInfo.position, playerInfo.velocity);
+
+                playerSpace.put(ClientUpdate.KILL);
+                playerSpace.put(ClientUpdate.KILL, name, playerKilled.getName());
+            } catch (Exception e) {
+                System.out.println(Arrays.toString(e.getStackTrace()));
+            }
+        }
+    }
+
+    private void onSabotageClicked(){
+        System.out.println("Sabotage not implemented yet");
+    }
+
+    private void onVentClicked(){
+        System.out.println("Vent not implemented yet");
+
+        if(ventInFocus != null){
+            ventInFocus.interact();
+        }
+    }
+
     private void updateVelocity() {
         double dx = 0;
         double dy = 0;
@@ -272,40 +342,4 @@
         playerInfo.velocity[1] = dy;
     }
 
-    private void onUseClicked(){
-        System.out.println("Use not implemented yet");
-    }
-
-    private void onMapClicked(){
-        System.out.println("Map not implemented yet");
-    }
-
-    private void onReportClicked(){
-        System.out.println("Report clicked");
-    }
-
-    private void onKillClicked(){
-        System.out.println("Kill clicked");
-
-        CharacterView playerKilled = controller.getPlayerToKill(this.characterView);
-
-        if (playerKilled != null) {
-            playerInfo.position = new double[]{playerKilled.getCenterX(), playerKilled.getCenterY()};
-            this.characterView.render(playerInfo.position, playerInfo.velocity);
-
-            try {
-                playerSpace.put(ClientUpdate.POSITION);
-                playerSpace.put(ClientUpdate.POSITION, playerInfo.position, playerInfo.velocity);
-
-                playerSpace.put(ClientUpdate.KILL);
-                playerSpace.put(ClientUpdate.KILL, name, playerKilled.getName());
-            } catch (Exception e) {
-                System.out.println(Arrays.toString(e.getStackTrace()));
-            }
-        }
-    }
-
-    private void onSabotageClicked(){
-        System.out.println("Sabotage not implemented yet");
-    }
 }
